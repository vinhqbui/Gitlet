package gitlet;

import java.io.File;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Objects;
import java.util.Set;
import java.util.Date;

/** This class represent the structure of a commit.
 * @author Vinh Bui
 * **/
public class Commit implements Serializable {

    /** Create default commit with timestamp 0. Used for initial commit. **/
    Commit() {
        _date = new Date(0);
        _author = "Vinh-The Author";
        _message = "initial commit";
        _blobs = new HashMap<>();
        _parent = null;
        _id = Utils.sha1(getAuthor(), getMessage(),
                getDate().toString(), getBlobs().toString());
    }

    /** Create new commit with metadata copied from parent commit.
     * @param parent the latest commit of current branch
     *               (HEAD currently pointed to).
     * @param author name of committer
     * @param message the custom message of commit
     * **/
    Commit(Commit parent, String author, String message) {
        this._parent = parent;
        this.setAuthor(author);
        this._blobs = new HashMap<>();
        HashMap<String, String> parentBlobs = parent.getBlobs();
        if (parent.getBlobs().size() > 0) {
            for (String key: parentBlobs.keySet()) {
                _blobs.put(key, parentBlobs.get(key));
            }
        }
        this._mergedParent = getParent()._mergedParent;
        this.setMessage(message);
        this._date = new Date();
        _id = Utils.sha1(getAuthor(), getMessage(),
                getDate().toString(), getBlobs().toString());
    }

    /** The default path for commit.
     * @return path to folder stored commits.
     * **/
    public static String getFolderPath() {
        return _folderPath;
    }

    /** Perform commit by updating blobs array according to staged for add
     * and removal.
     * @param stagedAdd files ready for tracking
     * @param stageRemove files ready for untracking
     * @return object of current commit
     * **/
    public Commit doCommit(Set<String> stagedAdd,
                           Set<String> stageRemove) {
        for (String filename : stagedAdd) {
            String filePath = System.getProperty("user.dir") + "/" + filename;
            String content = Utils.readContentsAsString(new File(filePath));
            Blob blob = new Blob(filename, content);
            if (_blobs.containsKey(filename)) {
                String savedID = getBlobs().get(filename);
                if (blob.getId().equals(savedID)) {
                    continue;
                }
            }
            blob.toFile();
            _blobs.put(filename, blob.getId());
        }
        for (String filename : stageRemove) {
            if (_blobs.containsKey(filename)) {
                _blobs.remove(filename);
            }
        }
        toFile();
        return this;
    }

    /** Load commit instance from file.
     * @param file to the destination
     * @return a commit instance.
     * **/
    public static Commit fromFile(File file) {
        return Utils.readObject(file, Commit.class);
    }

    /** Load commit instance from file.
     * @param id id of file
     * @return a commit instance.
     * **/
    public static Commit fromFile(String id) {
        File file = new File(_folderPath + "/" + id + ".commit");
        return Utils.readObject(file, Commit.class);
    }

    /** Set default saved folder.
     * @param path path to folder
     * **/
    public static void setFolderPath(String path) {
        _folderPath = path;
    }

    /** Used to compare two commit objects.
     * @param o other commit object.
     * @return true if equal, false if not.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Commit commit = (Commit) o;
        return _id.equals(commit._id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(_id);
    }

    /** Serialize this instance into file. The filename is sha1 generated by
     * combining author, message, timestamp, and blobs.
     * **/
    public void toFile() {
        String filename = getFolderPath() + "/" + buildCommitName(getId());
        Utils.writeObject(new File(filename), this);
    }

    /** A helper to add tail.
     * @param filename the id of the commit.
     * @return id with extension commit.
     * **/
    private String buildCommitName(String filename) {
        return filename + ".commit";
    }

    /** The name of the author.
     * @return author name
     * **/
    public String getAuthor() {
        return _author;
    }

    /** Change author name, in case we want it.
     * @param author new author name
     * **/
    public void setAuthor(String author) {
        this._author = author;
    }

    /** The author's message.
     * @return get the attribute message.
     * **/
    public String getMessage() {
        return _message;
    }

    /** Change the message in a commit in case we want it.
     * @param message new message
     * **/
    public void setMessage(String message) {
        this._message = message;
    }

    /** Hashmap of blobs, which are files.
     * @return the list of blobs.
     * **/
    public HashMap<String, String> getBlobs() {
        return _blobs;
    }

    /** ID of the commit.
     * @return get id of the blob.
     * **/
    public String getId() {
        return _id;
    }

    /** Previous commit.
     * @return get the parent commit.
     * **/
    public Commit getParent() {
        return _parent;
    }

    /** The date of when the commit was made.
     * @return get the date commit was made.
     * **/
    public Date getDate() {
        return _date;
    }

    /** ID of the commit. **/
    private String _id;

    /** The date of commit. **/
    private Date _date;

    /** The author of commit. **/
    private String _author;

    /** The message commit. **/
    private String _message;

    /** Manage the hashmap to the backup of files. **/
    private HashMap<String, String> _blobs;

    /** Previous commit. **/
    private Commit _parent;

    /** Getter method for merged parent.
     * @return merged parent commit.
     * **/
    public Commit getMergedParent() {
        return _mergedParent;
    }

    /** Setter method for merged parent.
     * @param mergedParent the merged parent
     * **/
    public void setMergedParent(Commit mergedParent) {
        this._mergedParent = mergedParent;
    }

    /** The commit that merged into this commit. **/
    private Commit _mergedParent = null;

    /** Store the commit folder. **/
    private static String _folderPath = Gitlet.getDefaultFolder() + "/commits";
}
